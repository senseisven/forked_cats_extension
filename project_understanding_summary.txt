# Nanobrowser Project Understanding Summary

## Project Overview
Nanobrowser is an open-source AI web automation Chrome extension that runs locally in the browser. It serves as a free alternative to OpenAI Operator with flexible LLM options and a multi-agent system.

## Key Features
- **Multi-agent System**: Uses specialized AI agents (Navigator, Planner, Validator) for complex web workflows
- **Interactive Side Panel**: Chat interface with real-time status updates
- **Task Automation**: Automates repetitive web tasks across websites
- **Multiple LLM Support**: Supports OpenAI, Anthropic, Gemini, Ollama, Groq, Cerebras, and custom OpenAI-compatible providers
- **Privacy-Focused**: Everything runs locally, no data shared with cloud services
- **100% Free**: No subscription fees, users only pay for their own API usage

## Project Structure
- `chrome-extension/` - Main Chrome extension code
- `packages/` - Shared packages and utilities
- `pages/` - Additional web pages
- `dist/` - Built extension files (generated after build)

## Technology Stack
- **Framework**: React 18.3.1 with TypeScript
- **Styling**: Tailwind CSS
- **Build Tool**: Vite with Turbo for monorepo management
- **Package Manager**: pnpm (v9.15.1)
- **Target**: Chrome Extension Manifest V3

## Development Setup
- **Node.js**: v22.12.0+ (currently using v23.10.0)
- **pnpm**: v9.15.1+ (currently using v9.15.1)

## Build Commands
- `pnpm install` - Install dependencies ✅ (completed)
- `pnpm dev` - Development build with hot reload ✅ (running in background)
- `pnpm build` - Production build
- `pnpm zip` - Create distribution zip file

## Extension Structure
The built extension includes:
- **manifest.json**: Extension configuration with permissions for storage, scripting, tabs, debugger, and sidePanel
- **background.iife.js**: Service worker for background processes
- **side-panel/**: Main UI interface (React-based)
- **content/**: Content scripts for web page interaction
- **options/**: Extension settings page
- **permission/**: Permission handling
- **Icons**: 32px and 128px extension icons

## Current Status
✅ Dependencies installed
✅ Production build completed successfully
✅ Extension files generated in `dist/` directory
✅ All required files present (content script, manifest, etc.)
✅ Extension name changed to "エイナーの手" 
✅ **Full Japanese UI localization completed**
🔄 Ready for Chrome extension loading and testing

## Recent Major Updates

### Custom Template System (Latest)

**Problem Solved**: Replaced the fixed QuickStart items (GitHub star, X follow, AI papers) with a user-friendly custom template system.

**What Changed**:

1. **Updated Default Templates** (`packages/storage/lib/prompt/favorites.ts`):
   - Replaced marketing-focused templates with practical user-focused ones:
     - "📧 Check Daily Emails" - Summarizes important daily emails
     - "📰 Daily News Summary" - Creates news summaries from preferred sites  
     - "📋 Create Meeting Notes" - Organizes meeting notes with action items

2. **Enhanced BookmarkList Component** (`pages/side-panel/src/components/BookmarkList.tsx`):
   - Added "+" button in the QuickStart header to create new templates
   - Implemented template creation form with:
     - Title input field
     - Content textarea for task description
     - Save/Cancel buttons with proper validation
   - Added proper focus management for accessibility
   - Added new props: `onBookmarkAdd` callback

3. **Updated SidePanel Integration** (`pages/side-panel/src/SidePanel.tsx`):
   - Added `handleBookmarkAdd` function to save new templates to storage
   - Connected the new template creation flow to the favorites storage system
   - Maintained existing edit, delete, and reorder functionality

4. **Japanese Translations** (`packages/i18n/locales/en/messages.json`):
   - Added complete Japanese translations for template management:
     - `addTemplate`: "テンプレートを追加"
     - `templateTitle`: "テンプレートタイトル"
     - `templateTitlePlaceholder`: "例: 毎日のメールチェック"
     - `templateContent`: "テンプレート内容"
     - `templateContentPlaceholder`: "AIエージェントに実行してもらいたいタスクを入力してください..."

**User Experience**: Users can now create personalized task templates for their daily workflows instead of being limited to fixed promotional content. Templates are saved persistently and can be edited, deleted, or reordered as needed.

**Technical Implementation**: Leveraged the existing favorites storage system but enhanced the UI to make template creation more accessible and user-friendly.

### Complete Japanese Localization (Previous)

**Problem Solved**: Users in Japan couldn't use the extension effectively due to English-only interface.

**What Changed**:

1. **Settings Panel Translation**:
   - All settings categories and options now display in Japanese
   - Model selection interfaces, parameter controls, and provider management
   - Enhanced layout to accommodate longer Japanese text (widened sidebar from w-48 to w-56)

2. **Comprehensive Translation Coverage**:
   - General settings terms (maxStepsPerTask, failureTolerance, enableVisionWithHighlighting, etc.)
   - Model interface terms (modelSelection, llmProviders, speechToTextModel, etc.)
   - Agent descriptions (planner, navigator, validator with full descriptions)
   - UI elements (buttons, labels, placeholders, error messages)
   - Provider management terms (apiKey, baseUrl, models, save, cancel, delete, etc.)

3. **Component Updates**:
   - Added `import { t } from '@extension/i18n'` to all relevant components
   - Replaced hardcoded English strings with `t('translationKey')` function calls in:
     - Options.tsx (main settings layout)
     - GeneralSettings.tsx (task and behavior settings)  
     - ModelSettings.tsx (provider and model configuration)

**Technical Details**: Used Chrome extension i18n system with comprehensive Japanese translations in `packages/i18n/locales/en/messages.json`.

## Fixed Issues
- ✅ Port 8081 conflict resolved
- ✅ Missing content script file (content/index.iife.js) now built properly
- ✅ _locales directory created successfully
- ✅ Clean production build completed
- ✅ JSX syntax errors in SidePanel component fixed

## Next Steps for Testing
1. Open `chrome://extensions/` in Chrome
2. Enable "Developer mode"
3. Click "Load unpacked" and select the `dist/` folder
4. Configure API keys in the extension settings
5. Test web automation features

## Key Use Cases
- News summarization from websites
- GitHub repository research
- Shopping research and comparison
- General web automation tasks through natural language commands 