# ネコノテ (Nanobrowser Fork) - Project Understanding Summary

## Overview
This is a **strategic fork** of the [original nanobrowser repository](https://github.com/nanobrowser/nanobrowser.git) with significant **Japanese localization** and **unique enhancements**. The fork has been **selectively updated** with upstream improvements while preserving all custom innovations.

## Recent Updates (January 2025)

### ✅ Successfully Merged from Upstream
- **Bug Fix**: Resolved model name collision between providers by storing provider>model pairs  
- **Performance**: Fixed line number mismatches in sourcemap for better debugging
- **Architecture**: DOM folder reorganized into browser folder as sub-package
- **Dependencies**: Upgraded Puppeteer from 24.8.2 to 24.10.1
- **Dependencies**: Updated @langchain packages (cerebras, deepseek, xai) to latest versions
- **Core**: Updated @langchain/core to 0.3.58 for peer dependency compatibility

### 🆕 NEW: Agent-E Inspired Enhancements (January 2025)
**Major enhancement to dropdown handling capabilities based on Agent-E analysis:**

#### DOM Mutation Observer (`dom/mutation-observer.ts`)
- **Real-time DOM change detection** - Monitors dynamic content changes
- **Dynamic dropdown support** - Detects when dropdown options load asynchronously  
- **Autocomplete awareness** - Handles suggestions that appear/disappear
- **Subscribe/unsubscribe pattern** - Other components can listen for changes
- **Chrome extension integration** - Works with content script injection

#### Enhanced Dropdown Handler (`dom/enhanced-dropdown.ts`)
- **MMID attribute system** - Injects unique identifiers for reliable element targeting
- **Multi-type dropdown support**:
  - Native HTML `<select>` elements
  - ARIA listbox (`role="listbox"`)
  - ARIA combobox (`role="combobox"`)
  - Custom dropdown implementations
- **Advanced option detection** - Handles various dropdown patterns and selectors
- **Dynamic option loading** - `waitForDropdownOptions()` for async content
- **Japanese localization** - All error messages in Japanese
- **Multiple selection strategies** - Text, value, index, and MMID-based selection

#### Key Features Inspired by Agent-E:
1. **MMID Element Identification** - Unique attribute injection for robust targeting
2. **Accessibility Tree Integration** - Better element detection and interaction
3. **DOM Mutation Awareness** - Detects when interactions cause page changes
4. **Visual Feedback Support** - Foundation for highlighting and debugging
5. **Multiple Fallback Strategies** - Robust option selection with various approaches

### 🛡️ Preserved Unique Features (Not in Upstream)
The upstream repository has **simplified/removed** many features that make this fork unique:
- **Centralized Backend Service** - Completely removed from upstream
- **Japanese Language System** - Dynamic language detection removed from upstream  
- **MCP Integration** - Doesn't exist in upstream
- **Token Management System** - Doesn't exist in upstream
- **Advanced Provider Management** - Simplified in upstream

## Key Innovations vs Original Repository

### 1. **Japanese Localization & Branding** 🇯🇵
- **Brand Name**: ネコノテ (Cat's Paw) instead of "Nanobrowser"
- **Agent Names**: Catified versions
  - プランニャー (Planner) 🐱
  - ニャビゲーター (Navigator) 🧭  
  - バリデーニャー (Validator) ✓
- **UI Language**: Complete Japanese interface
- **Cultural Integration**: Cat-themed elements throughout

### 2. **Centralized Backend Service** 🌐
**Location**: `backend-service/server.js`
- **Purpose**: Eliminates need for users to provide their own API keys
- **Architecture**: Express.js server with OpenRouter integration
- **Features**:
  - Rate limiting and security
  - CORS configuration for Chrome extension
  - Environment variable validation
  - Token usage tracking
  - Error handling and logging
- **Deployment**: Configured for Render.com hosting

### 3. **Model Context Protocol (MCP) Integration** 🔧 *(REMOVED FROM UI)*
**Status**: Backend service files preserved, all UI components removed
- **Backend Service**: MCP functionality still available via `backend-service/`
- **Chrome Extension**: All MCP integration UI and settings removed
- **Rationale**: Simplified user interface by removing MCP configuration complexity
- **Impact**: Users can no longer configure MCP servers through extension UI

### 4. **Advanced Settings System** ⚙️
**Location**: `packages/storage/lib/settings/`
- **Centralized API Settings**: `centralizedApi.ts` - Backend service configuration
- **Default Providers**: `defaultProviders.ts` - Pre-configured LLM providers  
- **MCP Settings**: *(Removed)* - UI configuration no longer available
- **Token Management**: Integration with cursor-style token tracking
- **Enhanced Types**: Extended type definitions for all features

### 5. **Token Usage System** 💰
**Location**: `packages/storage/lib/token-usage.ts`
- **Purpose**: Track and display API usage costs
- **Features**:
  - Real-time token counting
  - Cost calculation per model
  - Usage history
  - Budget tracking
- **UI Integration**: Token counter in side panel

### 6. **Enhanced UI Components** 🎨
**Location**: `pages/options/src/components/`
- **MCPSettings.tsx**: *(Removed)* - MCP configuration UI no longer available
- **TokenSettings.tsx**: Token usage tracking and display
- **Styling**: Warm cream theme (#ede2c7) with Japanese aesthetics
- **Dark/Light Mode**: Enhanced theming system

### 7. **🆕 Advanced Web Automation (Agent-E Inspired)** 🤖
**Location**: `chrome-extension/src/background/browser/dom/`
- **DOM Mutation Observer**: Real-time detection of page changes
- **Enhanced Dropdown Handling**: Support for all dropdown types
- **MMID Element Targeting**: Reliable element identification system
- **Dynamic Content Support**: Handles asynchronously loaded options
- **Japanese Error Messages**: Maintains localization consistency

## Technical Architecture

### Core Components
1. **Chrome Extension**: Core automation engine with Japanese agents
2. **Backend Service**: Centralized API proxy (unique to this fork)
3. **MCP Integration**: Backend service only - UI removed
4. **Storage System**: Enhanced settings and token management
5. **UI System**: Japanese-localized interface with custom theming
6. **🆕 Advanced DOM Handling**: Agent-E inspired web automation capabilities

### File Structure Highlights
```
├── backend-service/           # Centralized API service (fork unique)
├── chrome-extension/src/
│   ├── background/
│   │   ├── agent/            # Japanese AI agents
│   │   ├── browser/dom/      # Enhanced DOM handling
│   │   │   ├── mutation-observer.ts    # Dynamic change detection
│   │   │   ├── enhanced-dropdown.ts    # Advanced dropdown support
│   │   │   └── ...           # Other DOM services
│   │   └── services/
│   │       └── mcp.ts        # MCP integration (fork unique)
├── packages/storage/lib/
│   └── settings/             # Enhanced settings system
└── pages/options/src/
    └── components/           # Japanese UI components
```

### Current Status: Fully Functional ✅
- **Build Status**: All builds passing after Agent-E integration
- **Dependencies**: Updated and resolved
- **Compatibility**: Chrome Extension Manifest V3 compliant  
- **Features**: All Japanese localization and unique features preserved
- **🆕 Web Automation**: Enhanced dropdown handling with dynamic content support
- **Updates**: Successfully integrated performance improvements from upstream

## Development Notes

### Why This Fork Exists
The original nanobrowser requires users to:
- Provide their own API keys
- Configure multiple LLM providers individually
- Handle complex authentication setups
- Deal with limited dropdown handling capabilities

This fork provides:
- **Zero-setup experience** through centralized backend
- **Japanese language support** with cultural integration
- **Advanced integrations** like MCP for enhanced capabilities
- **Better UX** with token tracking and enhanced settings
- **🆕 Superior web automation** with Agent-E inspired dropdown handling

### Agent-E Integration Benefits
By analyzing and integrating Agent-E's backend functionality, this fork now provides:
- **Dynamic dropdown support** - Handles modern web apps with async content
- **Robust element targeting** - MMID system prevents selector failures
- **Real-time change detection** - Knows when page content updates
- **Multiple dropdown types** - Native selects, listboxes, comboboxes, custom
- **Enhanced reliability** - Multiple fallback strategies for option selection

### Merge Strategy Used
Instead of full merge (which would remove unique features), we used **selective cherry-picking**:
- ✅ Applied: Bug fixes, performance improvements, dependency updates
- ✅ Integrated: Agent-E's advanced dropdown handling concepts
- ❌ Avoided: Upstream simplifications that remove fork features
- 🛡️ Preserved: All Japanese localization and unique innovations

### Future Maintenance
- Continue selective merging of upstream improvements
- Preserve unique Japanese and centralized features
- Monitor upstream for compatible enhancements
- Maintain backward compatibility with existing users
- 🆕 Consider additional Agent-E features like visual feedback and screenshot capabilities

---

**Last Updated**: January 2025 - Removed MCP integration UI from Chrome extension while preserving backend MCP service files. Users can no longer configure MCP servers through the extension interface.

## Recent Major Updates (Latest)

### Template System Enhancement and Japanese Localization (Current) 🇯🇵
**Major improvements to template system and user interface:**

#### Enhanced Template Editing System
- **Full Content Editing**: Users can now edit both template titles and content (previously title-only)
- **Improved UI**: Redesigned edit interface with separate fields for title and content
- **Better UX**: Added proper labels, validation, and save/cancel functionality
- **Storage Integration**: Enhanced `favoritesStorage.updatePrompt()` integration

#### Japanese Default Templates
Updated default templates with practical Japanese content:
- 📧 毎日のメールチェック (Daily Email Check)
- 📰 今日のニュース要約 (Today's News Summary) 
- 📋 会議メモの整理 (Meeting Notes Organization)
- 🛒 オンラインショッピング検索 (Online Shopping Search)
- 🌤️ 天気予報の確認 (Weather Forecast Check)

#### Translation System Improvements
- **Complete Japanese Support**: All interface elements properly localized
- **Usage Guide Fixes**: Resolved missing text in usage guide tab side menu
- **Message File Updates**: Added missing translation keys for save/cancel actions
- **Build Optimization**: Removed duplicate translation keys causing build warnings

#### Technical Implementation
**Files Modified:**
- `packages/storage/lib/prompt/favorites.ts` - Japanese default templates
- `pages/side-panel/src/components/BookmarkList.tsx` - Enhanced editing UI
- `pages/side-panel/src/SidePanel.tsx` - Template update handler
- `packages/i18n/locales/*/messages.json` - Translation improvements

**Key Features:**
- Template content editing with real-time preview
- Proper Japanese localization throughout
- Enhanced user experience for template management
- Maintained backward compatibility with existing templates
  - 🛒 オンラインショッピング検索 (Online Shopping Search)
  - 🌤️ 天気予報の確認 (Weather Forecast Check)
- **Enhanced Template Editing**: Users can now edit both title AND content of templates
  - Previously only title editing was supported
  - Added new `onBookmarkUpdate` handler for full template editing
  - Enhanced UI with separate fields for title and content
  - Proper validation and error handling
- **Translation Completeness**: Added missing translation keys for save/cancel buttons
  - Added "save" and "cancel" keys to both Japanese and English message files
  - Fixed potential UI text display issues

### FIXES: Side Panel UI and Usage Guide (Previous)
- **Side Panel UI Restoration**: Fixed broken UI structure that was caused by incorrect modifications
  - Restored original chat interface layout with proper message flow
  - Fixed BookmarkList and TokenCounter positioning
  - Maintained responsive design and proper overflow handling

### AI Model Preset System
- **Default Models**: All three agents (Planner, Navigator, Validator) now use `google/gemini-2.5-pro-preview` by default
- **No Setup Required**: Users no longer need to configure models or API keys on first use
- **Background Initialization**: The extension automatically sets up models on first run via `setupDefaultAgentModels()`
- **Centralized API**: Uses the ネコノテAPI service which requires no API keys from users

### First-Time User Experience
- **Removed Setup Screen**: Eliminated the model configuration requirement screen
- **Direct Chat Access**: New users get immediate access to the chat interface
- **Optional Guide Link**: Small welcome popup with option to view usage guide
- **Background Model Setup**: Models are configured automatically without user intervention

### Usage Guide Implementation
- **Japanese Guide Page**: Created comprehensive step-by-step usage guide in Japanese
- **Settings Integration**: Added 使用ガイド (Usage Guide) tab as the first tab in options
- **Content Structure**: 
  - Step-by-step instructions for using the extension
  - Examples of natural language commands
  - Explanation of the three AI agents
  - Tips and troubleshooting section
- **Responsive Design**: Left-aligned content with proper dark/light mode support

## Core Architecture

### Multi-Agent System
The extension uses three specialized AI agents working together:

1. **プランニャー (Planner)** 🐱
   - Analyzes user requests and creates execution plans
   - Breaks down complex tasks into manageable steps
   - Determines which websites/services to use

2. **ニャビゲーター (Navigator)** 🧭
   - Executes web navigation and interaction
   - Clicks buttons, fills forms, scrolls pages
   - Captures screenshots and page content

3. **バリデーニャー (Validator)** ✓
   - Verifies task completion and result accuracy
   - Checks if objectives were met
   - Provides quality assurance for automation results

### Technical Components

#### Backend Service (`backend-service/`)
- Express.js server for centralized API
- Provides free AI model access (ネコノテAPI)
- Handles model routing and request processing
- Eliminates need for user API keys

#### Chrome Extension (`chrome-extension/`)
- **Background Script**: Main orchestration and agent management
- **Side Panel**: Chat interface and user interaction
- **Content Script**: DOM interaction and page manipulation
- **Options Page**: Settings and configuration

#### Key Packages (`packages/`)
- **storage**: Settings, chat history, user preferences management
- **i18n**: Internationalization with Japanese/English support
- **ui**: Shared UI components and styling
- **shared**: Common utilities and type definitions

### User Interface

#### Side Panel (`pages/side-panel/`)
- Main chat interface for user interaction
- Real-time message display with agent identification
- Token usage tracking and display
- History management and session handling
- Bookmark system for favorite prompts
- Voice input support (speech-to-text)

#### Options Page (`pages/options/`)
- **使用ガイド (Usage Guide)**: Step-by-step instructions in Japanese
- **一般 (General)**: Theme, language, and basic settings
- **モデル (Models)**: AI model configuration (now preset)
- **トークン (Tokens)**: Usage tracking and limits
- **ファイアウォール (Firewall)**: Security and domain restrictions

### Key Features

#### Natural Language Processing
- Accepts commands in natural Japanese
- Examples: "YouTubeで猫の動画を検索して", "Amazonで本を探して"
- Supports complex multi-step tasks
- Context-aware conversation flow

#### Web Automation Capabilities
- Form filling and submission
- Search and navigation
- Content extraction and analysis
- Multi-page workflows
- Screenshot capture and analysis

#### User Experience Features
- Dark/light theme support
- Responsive design for various screen sizes
- Accessibility features and keyboard navigation
- Error handling and graceful failures
- Offline capability for settings

## Development Workflow

### Build System
- **Turborepo**: Monorepo orchestration
- **Vite**: Fast development and production builds
- **pnpm**: Package management and workspace handling
- **TypeScript**: Type safety across all packages

### Key Scripts
- `pnpm dev`: Development mode with hot reload
- `pnpm build`: Production build for all packages
- `pnpm build:i18n`: Regenerate translation types
- `pnpm zip`: Create distribution package

### File Structure Notes
- Extensions uses manifest v3
- Side panel implementation for modern Chrome
- Modular package architecture for maintainability
- Shared configurations via `packages/` structure

## Recent Changes Summary
1. **Preset AI Models**: Eliminated user configuration requirement
2. **Restored Side Panel**: Fixed broken UI structure 
3. **Fixed Usage Guide**: Added comprehensive Japanese guide with proper content
4. **Improved Onboarding**: Welcome popup instead of blocking setup screen
5. **Background Setup**: Automatic model configuration on first run

## Patch: June 2025 – Usage Guide Tab Label Fix
- Added missing `usageGuideTab` key in English locale (`packages/i18n/locales/en/messages.json`).
- This resolves blank label issue for the "Usage Guide" tab in the Options (side-panel settings) page when browser locale is set to English.

## Patch: June 2025 – Markdown Rendering in Chat Panel
- Integrated `marked` library and updated `MessageList` component to render Markdown safely.
- Added `marked` to side panel package dependencies.
- Allows bold text, bullet lists, and other Markdown to display correctly in chat messages.

## Patch: June 2025 – Version bump for Web Store
- Root package.json bumped to 0.1.8 for Chrome Web Store submission.

## Performance Investigation (June 2025)

### Navigator Agent Latency & Occasional Hang
After profiling `chrome-extension/src/background/agent/agents/navigator.ts` and related browser-layer helpers we observed:

1. **Unconditional 1 s sleep between every action**  
   ‑ `NavigatorAgent.doMultiAction()` calls `await new Promise(r=>setTimeout(r,1000))` irrespective of the configured `waitBetweenActions` value.  On pages that require many micro-actions (e.g. filling 3 fields + click) this alone adds several seconds.

2. **Repeated Full DOM + Screenshot Capture**  
   The Navigator grabs a fresh browser state twice per step: before the LLM call _and_ again after each index-based action to detect new elements.  Both calls default to `useVision = context.options.useVision` which can trigger Puppeteer screenshots and heavy `buildDomTree` traversal.  This can take >1 s on content-heavy pages.

3. **`waitForTabEvents` / `waitForStableNetwork` Defaults**  
   Navigations always wait the hard-coded 0.25–0.5 s idle plus `maximumWaitPageLoadTime` (5 s) before continuing—even when the target page is already cached.  For same-origin SPA navigation this is unnecessary and feels like a hang.

4. **Potential dead-wait on dynamic requests**  
   `_waitForStableNetwork` filters resource types but can still keep `pendingRequests` open for long-poll/WebRTC requests that don't complete, forcing the 5 s timeout path.

5. **LLM structured-output parsing fallback**  
   When Gemini/OpenAI occasionally returns empty `content` with only a `tool_call`, the agent falls back correctly, but if the response is malformed the agent throws and the executor silently retries, looking like a freeze.

### Quick Wins Proposed

* Respect `browserContext.getConfig().waitBetweenActions` instead of fixed 1 s.
* Call `browserContext.getState(false)` for the post-action check when only hashes are needed; keep `useVision` only for the first snapshot per step.
* Short-circuit `_waitForStableNetwork` when `document.readyState === 'complete'` _and_ no pending XHR/Fetch for 500 ms.
* Add a safeguard in `NavigatorAgent.invoke` to bail out after N seconds and surface model timeout.

These changes should shave ~40-60 % off typical step time and remove most apparent "stuck" states.

---