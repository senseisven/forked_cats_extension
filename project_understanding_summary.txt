# ネコノテ (Nanobrowser Fork) - Project Understanding Summary

## Overview
This is a **strategic fork** of the [original nanobrowser repository](https://github.com/nanobrowser/nanobrowser.git) with significant **Japanese localization** and **unique enhancements**. The fork has been **selectively updated** with upstream improvements while preserving all custom innovations.

## Recent Updates (January 2025)

### ✅ Successfully Merged from Upstream
- **Bug Fix**: Resolved model name collision between providers by storing provider>model pairs  
- **Performance**: Fixed line number mismatches in sourcemap for better debugging
- **Architecture**: DOM folder reorganized into browser folder as sub-package
- **Dependencies**: Upgraded Puppeteer from 24.8.2 to 24.10.1
- **Dependencies**: Updated @langchain packages (cerebras, deepseek, xai) to latest versions
- **Core**: Updated @langchain/core to 0.3.58 for peer dependency compatibility

### 🆕 NEW: Agent-E Inspired Enhancements (January 2025)
**Major enhancement to dropdown handling capabilities based on Agent-E analysis:**

#### DOM Mutation Observer (`dom/mutation-observer.ts`)
- **Real-time DOM change detection** - Monitors dynamic content changes
- **Dynamic dropdown support** - Detects when dropdown options load asynchronously  
- **Autocomplete awareness** - Handles suggestions that appear/disappear
- **Subscribe/unsubscribe pattern** - Other components can listen for changes
- **Chrome extension integration** - Works with content script injection

#### Enhanced Dropdown Handler (`dom/enhanced-dropdown.ts`)
- **MMID attribute system** - Injects unique identifiers for reliable element targeting
- **Multi-type dropdown support**:
  - Native HTML `<select>` elements
  - ARIA listbox (`role="listbox"`)
  - ARIA combobox (`role="combobox"`)
  - Custom dropdown implementations
- **Advanced option detection** - Handles various dropdown patterns and selectors
- **Dynamic option loading** - `waitForDropdownOptions()` for async content
- **Japanese localization** - All error messages in Japanese
- **Multiple selection strategies** - Text, value, index, and MMID-based selection

#### Key Features Inspired by Agent-E:
1. **MMID Element Identification** - Unique attribute injection for robust targeting
2. **Accessibility Tree Integration** - Better element detection and interaction
3. **DOM Mutation Awareness** - Detects when interactions cause page changes
4. **Visual Feedback Support** - Foundation for highlighting and debugging
5. **Multiple Fallback Strategies** - Robust option selection with various approaches

### 🛡️ Preserved Unique Features (Not in Upstream)
The upstream repository has **simplified/removed** many features that make this fork unique:
- **Centralized Backend Service** - Completely removed from upstream
- **Japanese Language System** - Dynamic language detection removed from upstream  
- **MCP Integration** - Doesn't exist in upstream
- **Token Management System** - Doesn't exist in upstream
- **Advanced Provider Management** - Simplified in upstream

## Key Innovations vs Original Repository

### 1. **Japanese Localization & Branding** 🇯🇵
- **Brand Name**: ネコノテ (Cat's Paw) instead of "Nanobrowser"
- **Agent Names**: Catified versions
  - プランニャー (Planner) 🐱
  - ニャビゲーター (Navigator) 🧭  
  - バリデーニャー (Validator) ✓
- **UI Language**: Complete Japanese interface
- **Cultural Integration**: Cat-themed elements throughout

### 2. **Centralized Backend Service** 🌐
**Location**: `backend-service/server.js`
- **Purpose**: Eliminates need for users to provide their own API keys
- **Architecture**: Express.js server with OpenRouter integration
- **Features**:
  - Rate limiting and security
  - CORS configuration for Chrome extension
  - Environment variable validation
  - Token usage tracking
  - Error handling and logging
- **Deployment**: Configured for Render.com hosting

### 3. **Model Context Protocol (MCP) Integration** 🔧
**Location**: `chrome-extension/src/background/services/mcp.ts`
- **Purpose**: Extend browser capabilities with external services
- **Implementation**: 
  - Google Sheets MCP server integration
  - Credential-based authentication
  - Fallback to browser automation when MCP unavailable
  - Dynamic server loading from user settings
- **Settings UI**: Complete configuration interface in options page

### 4. **Advanced Settings System** ⚙️
**Location**: `packages/storage/lib/settings/`
- **Centralized API Settings**: `centralizedApi.ts` - Backend service configuration
- **Default Providers**: `defaultProviders.ts` - Pre-configured LLM providers  
- **MCP Settings**: `mcpSettings.ts` - Server management and credentials
- **Token Management**: Integration with cursor-style token tracking
- **Enhanced Types**: Extended type definitions for all features

### 5. **Token Usage System** 💰
**Location**: `packages/storage/lib/token-usage.ts`
- **Purpose**: Track and display API usage costs
- **Features**:
  - Real-time token counting
  - Cost calculation per model
  - Usage history
  - Budget tracking
- **UI Integration**: Token counter in side panel

### 6. **Enhanced UI Components** 🎨
**Location**: `pages/options/src/components/`
- **MCPSettings.tsx**: Complete MCP server management interface
- **TokenSettings.tsx**: Token usage tracking and display
- **Styling**: Warm cream theme (#ede2c7) with Japanese aesthetics
- **Dark/Light Mode**: Enhanced theming system

### 7. **🆕 Advanced Web Automation (Agent-E Inspired)** 🤖
**Location**: `chrome-extension/src/background/browser/dom/`
- **DOM Mutation Observer**: Real-time detection of page changes
- **Enhanced Dropdown Handling**: Support for all dropdown types
- **MMID Element Targeting**: Reliable element identification system
- **Dynamic Content Support**: Handles asynchronously loaded options
- **Japanese Error Messages**: Maintains localization consistency

## Technical Architecture

### Core Components
1. **Chrome Extension**: Core automation engine with Japanese agents
2. **Backend Service**: Centralized API proxy (unique to this fork)
3. **MCP Integration**: External service connectivity (unique to this fork)
4. **Storage System**: Enhanced settings and token management
5. **UI System**: Japanese-localized interface with custom theming
6. **🆕 Advanced DOM Handling**: Agent-E inspired web automation capabilities

### File Structure Highlights
```
├── backend-service/           # Centralized API service (fork unique)
├── chrome-extension/src/
│   ├── background/
│   │   ├── agent/            # Japanese AI agents
│   │   ├── browser/dom/      # Enhanced DOM handling
│   │   │   ├── mutation-observer.ts    # Dynamic change detection
│   │   │   ├── enhanced-dropdown.ts    # Advanced dropdown support
│   │   │   └── ...           # Other DOM services
│   │   └── services/
│   │       └── mcp.ts        # MCP integration (fork unique)
├── packages/storage/lib/
│   └── settings/             # Enhanced settings system
└── pages/options/src/
    └── components/           # Japanese UI components
```

### Current Status: Fully Functional ✅
- **Build Status**: All builds passing after Agent-E integration
- **Dependencies**: Updated and resolved
- **Compatibility**: Chrome Extension Manifest V3 compliant  
- **Features**: All Japanese localization and unique features preserved
- **🆕 Web Automation**: Enhanced dropdown handling with dynamic content support
- **Updates**: Successfully integrated performance improvements from upstream

## Development Notes

### Why This Fork Exists
The original nanobrowser requires users to:
- Provide their own API keys
- Configure multiple LLM providers individually
- Handle complex authentication setups
- Deal with limited dropdown handling capabilities

This fork provides:
- **Zero-setup experience** through centralized backend
- **Japanese language support** with cultural integration
- **Advanced integrations** like MCP for enhanced capabilities
- **Better UX** with token tracking and enhanced settings
- **🆕 Superior web automation** with Agent-E inspired dropdown handling

### Agent-E Integration Benefits
By analyzing and integrating Agent-E's backend functionality, this fork now provides:
- **Dynamic dropdown support** - Handles modern web apps with async content
- **Robust element targeting** - MMID system prevents selector failures
- **Real-time change detection** - Knows when page content updates
- **Multiple dropdown types** - Native selects, listboxes, comboboxes, custom
- **Enhanced reliability** - Multiple fallback strategies for option selection

### Merge Strategy Used
Instead of full merge (which would remove unique features), we used **selective cherry-picking**:
- ✅ Applied: Bug fixes, performance improvements, dependency updates
- ✅ Integrated: Agent-E's advanced dropdown handling concepts
- ❌ Avoided: Upstream simplifications that remove fork features
- 🛡️ Preserved: All Japanese localization and unique innovations

### Future Maintenance
- Continue selective merging of upstream improvements
- Preserve unique Japanese and centralized features
- Monitor upstream for compatible enhancements
- Maintain backward compatibility with existing users
- 🆕 Consider additional Agent-E features like visual feedback and screenshot capabilities

---

**Last Updated**: January 2025 - Successfully integrated Agent-E inspired advanced dropdown handling while preserving fork uniqueness