# ネコノテ (nanobrowser) - Project Understanding Summary

## Project Overview
**ネコノテ** (Cat's Paw) is a sophisticated AI-powered Chrome extension for browser automation with multi-agent architecture. The extension uses three specialized AI agents (Planner, Navigator, Validator) working together to intelligently navigate websites, perform complex tasks, and interact with web content.

## Key Features
- **Multi-Agent Architecture**: Planner (strategic planning), Navigator (web interaction), Validator (result verification)
- **Multimodal AI**: Vision system for screenshot analysis, speech-to-text integration
- **40+ Cutting-Edge AI Models**: Claude Sonnet 4, Gemini 2.5 Pro, DeepSeek R1, OpenAI O3, Qwen Max, Grok 3 Beta, etc.
- **Japanese Localization**: Complete UI and system messages in Japanese
- **Theme System**: Warm cream (#ede2c7) default theme with dark mode toggle
- **Status messages in Japanese**: 計画中..., ナビゲーション中..., 検証中...

## Technical Architecture

### Core Components
- **Chrome Extension**: Manifest V3, TypeScript, React UI, Vite build system
- **Backend**: Centralized API service on Render.com proxying OpenRouter
- **Storage**: Chrome storage API with type-safe abstractions
- **Build System**: Turbo monorepo with pnpm package management

### Agent System
1. **Planner Agent**: Breaks down complex tasks into executable steps
2. **Navigator Agent**: Executes web interactions (clicking, typing, navigation)
3. **Validator Agent**: Verifies task completion and validates results

### Model Integration
- **OpenRouter Integration**: 40+ models from multiple providers
- **Centralized Provider**: Default API service requiring no user API keys
- **Model Selection**: Intelligent routing based on task complexity
- **Fallback System**: Automatic model switching on failures

## Recent Major Updates

### Dynamic Language Detection System (Latest)
- **Language Detection**: Implemented `languageDetection.ts` with proper regex patterns
- **Fixed Critical Bug**: Language detection regex was missing global flags, causing incorrect detection
- **Dynamic Prompts**: Created `templates/dynamic.ts` with language-specific prompt templates
- **Agent Context**: Updated all agents to use detected language from user input
- **Status Messages**: Language-appropriate status messages (計画中... vs Planning...)
- **Test Results**: Successfully detects Japanese text like "twitter(x)に行ってAIに関するツイートをして" as 'ja'

### Japanese Language Implementation (Previous)
- **System Prompts**: All agent prompts now in Japanese with explicit language instructions
- **Agent Messages**: All status messages, error messages, and responses in Japanese
- **Planner Fixes**: Removed refusal behavior for web tasks (Twitter posting, etc.)
- **Error Messages**: Translated all error messages to Japanese

### Model Updates & Fixes
- **Expanded Model Library**: From 7 obsolete models to 40+ cutting-edge models
- **Fixed Model IDs**: Corrected OpenRouter format (removed problematic date suffixes)
- **Syntax Error Fix**: Fixed `setupDefaultCentralizedProvider` function
- **Aggressive Detection**: Updated model detection logic (≤25 models instead of ≤7)

### Theme System
- **Default Theme**: Warm cream background (#ede2c7) for new users
- **Dark Mode Toggle**: User-configurable light/dark/system theme options
- **Japanese UI**: Theme settings with Japanese labels and descriptions

### Dynamic Language Update for Follow-Up Tasks
- **Added `setLanguage` Method**: Implemented `setLanguage` method in all prompt classes (`PlannerPrompt`, `NavigatorPrompt`, `ValidatorPrompt`)
- **Enhanced `Executor.addFollowUpTask`**: Updated `Executor.addFollowUpTask` to detect the language of each new task and propagate it to the prompts and context at runtime
- **Fix for Language Persistence**: Ensures the Planner/Navigator/Validator always respond in the same language as the latest user input, fixing the issue where later tasks kept the initial language
- **UI Improvements**: Updated agent icons to use new PNG files from dist directory (navigator.png, planner.png, validator.png), improved timestamp readability by making the text darker (from text-gray-300 to text-gray-600 in light mode), and cleaned up the provider name from "ネコノテAI (No API Key Required)" to just "ネコノテAI" for better display in model selection dropdowns.
- **Modern Loader Animations**: Completely redesigned the loading animations throughout the chat panel with modern, stylish loaders. Each agent now has a unique animation style: Planner uses pulsing dots (thinking/planning), Navigator uses wave animation (navigating/moving), Validator uses breathing circles (checking/validating), and general loading states use breathing dots. Added new Tailwind keyframes for pulse-dot, wave, rotate-gradient, breathe, and shimmer animations.

## File Structure
```
nanobrowser/
├── chrome-extension/          # Main extension code
│   ├── src/background/        # Background script and agents
│   │   ├── agent/            # Multi-agent system
│   │   │   ├── agents/       # Individual agent implementations
│   │   │   ├── prompts/      # System prompts (now in Japanese)
│   │   │   └── actions/      # Web automation actions
│   │   └── browser/          # Browser context management
│   └── public/               # Static assets
├── pages/                    # Extension UI pages
│   ├── side-panel/          # Main chat interface
│   ├── options/             # Settings page
│   └── content/             # Content script
├── packages/                # Shared packages
│   ├── storage/             # Settings and data management
│   ├── i18n/               # Internationalization
│   └── ui/                 # Shared UI components
└── dist-zip/               # Built extension packages
```

## Build & Deployment
- **Build Command**: `npm run build` (uses Turbo for parallel builds)
- **Package Command**: `npm run zip` (creates installable .zip)
- **Latest Package**: `extension-20250614-180104.zip` (2.12 MB)
- **Installation**: Chrome → Extensions → Developer mode → Load unpacked

## Configuration
- **Default Provider**: ネコノテAI (no API key required)
- **Model Selection**: Automatic based on task type
- **Theme**: Warm cream default, user-configurable
- **Language**: Japanese throughout system
- **Limits**: 10 steps per task, 5 actions per step, 3 failure tolerance

## Key Technical Decisions
1. **Japanese-First Design**: All system interactions in Japanese
2. **Multi-Agent Architecture**: Specialized agents for different task phases
3. **Centralized API**: Eliminates need for user API key management
4. **Warm Theme Default**: More welcoming than stark white
5. **Aggressive Model Updates**: Ensures users get latest AI capabilities
6. **Error Recovery**: Robust fallback mechanisms for reliability

## Development Workflow
1. Make changes to source code
2. Run `npm run build` to compile
3. Run `npm run zip` to package
4. Install in Chrome for testing
5. Update project understanding summary

## Current Status
- **Production Ready**: Fully functional with Japanese localization
- **Model Integration**: 40+ cutting-edge AI models working
- **Theme System**: Complete with user preferences
- **Agent Communication**: All in Japanese as requested
- **Error Handling**: Comprehensive Japanese error messages
- **Build System**: Stable and reliable

## Next Potential Improvements
- Enhanced speech recognition for Japanese
- More granular model selection options
- Advanced automation workflows
- Performance optimizations
- Additional language support beyond Japanese